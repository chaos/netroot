0.  Heritage

Nfsroot is based in part on Makia Minich's GeDI project 
(http://www.sourceforge.net/projects/gedi-tools).  Nfsroot borrows some
techniques and code developed for GeDI, however it differs from GeDI
in scope.  While GeDI manages a complete diskless environment, 
nfsroot just makes a root file system image usable by diskless clients.
It provides no help for managing DHCP, TFTP, or NFS services; creating 
images from RPM lists; or setting up config files in the client root 
file systems.  Tools and techniques are seperately available for these 
tasks and nfsroot attains some simplicity by focusing on the client runtime.

Nfsroot is installed into the client root image with rpm --root.
There is no server component.

1. Introduction

The nfsroot RPM is installed into a root image which is served to 
clients read-only.  When the client boots, the union file system (aufs) is 
used to combine this read-only NFS root file system with a tmpfs file 
system, yielding a read-write file system where changes go to the tmpfs.

If aufs is unavailable, another technique is used to make a configurable 
list of directories read-write.  Copies of these directories are made on 
a tmpfs and the copies are bind-mounted on top of their read-only source.

Changes made to the client root file system do not persist across reboots.

The server must provide DHCP, TFTP, and NFS service (read-only).  
Management of these services and their config files is beyond the
scope of the nfsroot package, but see the included dhcpd.conf file
for an example of the options and paths needed to make an nfsroot image 
bootable.

2. Image Management

Because of current unionfs limitations, it is not recommended that
the NFS file system be changed on the server while clients have it mounted.
Updates can be made by rsyncing the current image to a new directory, 
changing the new image, then updating dhcpd.conf to switch clients to 
the new image on the next reboot.
[ XXX Is this still true with aufs? ]

3. Configuration

/etc/sysconfig/nfsroot contains several tunable parameters.
Reasonable defaults are provided - see the file for details.

4. Client Boot Sequence

   1. A diskless client broadcasts a DHCP request on its management 
      ethernet interface.

   2. A DHCP server looks up the hardware ethernet address in /etc/dhcpd.conf 
      and responds. 

   3. The diskless client tftp's pxelinux.0 and pxelinux config file from 
      the /boot subdirectory of its root file system image on the server.

   4. Pxelinux displays its banner message on the console.
      If the config file allows for prompting, alternate kernels and
      command line parameters may be entered now.

   5. The selected vmlinuz and initrd files are downloaded using tftp.  
      Vmlinuz is executed with the initrd as its root file system.  
      The kernel executes /init from the initrd as its first process.

   6. /init sources a file /init.cfg which contains configuration information.
      If the eth0 device driver was configured, it is modprobed along with any 
      configured options.  Otherwise, PCI space is scanned for network devices
      and device drivers for all installed devices are loaded.  If pxelinux.cfg
      contains "ipappend 2", /init extracts the MAC address for the 
      booting ethernet from the kernel command line and ifrenames interfaces 
      so this matches eth0.

   7. /init issues a second DHCP request using dhclient to obtain the usual
      IP configuration stuff and the NFS root mount point (root-path), then 
      configures eth0 and mounts root-path using any configured NFS options.
      root-path becomes the new root and control passes to /etc/rc.nfsroot.
 
   8. /etc/rc.nfsroot (in the NFS root image) makes the read-only root file 
      system writeable by running /etc/rc.nfsroot.<method>, for each method
      in the METHODS list in /etc/sysconfig/nfsroot.  The successful script 
      will ensure root is read-write and exec /sbin/init.

5. LiveCD Usage

Since nfsroot is based on a model where the underlying root file system
is NFS mounted read-only, it was easy to extend the model to allow 
the root file system to be mounted from CD or DVD.  

A script "mklivecd" is provided to convert an nfsroot-enabled root file
system image to an iso which boots with isolinux instead of pxelinux.
All of the boot materials for the ISO live under /isolinux.  You may
edit the isolinux.cfg to add appropriate isolinux and kernel command line
options, or additional boot options for your setup.  The mklivecd script
copies vmlinuz and initrd from /boot into /isolinux (links do not work),
so if you want other kernel entries in your image, you can put them in
before you run mklivecd - just don't name them vmlinuz or initrd.

The initrd looks for the BOOTIF comand line option which is set by pxelinux
in the default pxelinux.cfg.  If not present, the initrd skips the DHCP
sequence and instead loads various drivers for IDE and USB CD-ROM devices,
mounts the file system, and starts rc.nfsroot as described in the previous
section.

It is technically possible to "clone" your laptop or whatever by installing
nfsroot into your real root file system, running mklivecd, and burning the
result to DVD.  However take note of the following caveats:
 . Boot options in your grub.conf may have to be manually be added to
   /isolinux/isolinux.cfg.
 . Your fstab may need editing to make it useful on the DVD.


6. Alternate Boot Methods

The rc.nfsroot startup script runs chrooted in the read-only root image
(NFS or cdrom).  It runs "boot method" startup scripts in the order
determined by the METHODS variable in /etc/sysconfig/nfsroot.  The first
one that succeeds will will proceed with system startup and not return.

The default boot method order is kdump, none, aufs, unionfs, bind, and ram.
The order may be changed by editing /etc/sysconfig/nfsroot in the image
and rebooting.

6.1. The ``kdump'' Method

Nfsroot works with RHEL 5 kdump.  nfsroot-kernel-pkg maintains symlinks 
for the current nfsroot initrd image such that /etc/init.d/kdump will arm 
kexec with it during system starup.  After a crash, when the secondary 
kernel boots, the nfsroot initrd starts as usual but rc.nfsroot-kdump 
finds a non-empty /proc/vmcore.  It then mounts KDUMP_DIR, runs the 
makedumpfile utility from kexec-tools to compress and filter the core 
according to KDUMP_LEVEL, saves the core to a file called 
vmcore-<hostname>-<date>, and reboots.

Vmcores can be examined with the crash utility, e.g.

   crash /boot/System.map /boot/vmlinux \
         /var/dumps/vmcore-ilc13-2007-11-04-19:12:21
   crash> bt

Note that the file /etc/kdump.conf only affects the kdump initrd,
thus when nfsroot is providing the initrd, that file has no effect.
However, /etc/sysconfig/kdump is still used by /etc/init.d/kdump.

6.2. The ``none'' Method

If the initial root file system is exported read-write, it is presumed
to be private to this client and startup simply continues.
Note that rc.nfsroot upgrades root to rw if permitted regardless
of NFSMOUNTOPTS in /etc/sysconfig/nfsroot (see Notes and Caveats below)
so it is essential to export root read-only on the server side if it
is not intended to  be shared.

6.3. The ``aufs'' Method

A ramdisk is created and root is crafted as a union file system 
based on a read-only NFS branch, and a read-write ramdisk branch.
The aufs file system is included in the CHAOS kernel.

6.4. The ``unionfs'' Method

Same as ``aufs'' but use the unionfs file system.
The unionfs file system is NOT included in the CHAOS kernel.

6.5. The ``bind'' Method

A ramdisk is created and directories listed in the RAMDIRS variable
in /etc/sysconfig/nfsroot are copied from the read-only root to the
ramdisk, and bind-mounted on top of the original.

6.6. The ``rbind'' Method

Same as ``bind'' except root is a ramdisk, RAMDIRS directories
are copied there and remaining top-level read-only directories are
bind-mounted there.

6.7. The ``ram'' Method

Similar to ``rbind'' except the entire root file system is copied
to the ramdisk.  Ensure that TMPFSMAX is set to accomodate it.

7. Notes and Caveats

The NFS clients generate a lot of traffic revalidating cached data.  
If, as suggested, updates are performed offline, NFS mount options 
such as "actimeo=600,nocto" can be added to retain cached data longer.

You may wish to disable cron on diskless clients, or prune default crontabs
such as makewhatis, logwatch, mlocate, and rpm and instead run these as
part of an image update procedure.  Running them on the node increases
ramdisk utilization.

FC5 and RHEL 4 /etc/rc.d/rc.6/K90network iterates through 
/etc/sysconfig/ifcfg-* to find interfaces to shut down.  If it shuts
down eth0, the node will hang.  Nfsroot scripts thus purposefully do not
create /etc/sysconfig/ifcfg-eth0.  The reboot will still generate some
noise trying to unmount /writeable and /readonly but after a couple
of brief retries, the system will reboot.

Kudzu, if on, may be extra helpful and create /etc/sysconfig/ifcfg-eth0
for you.  On RHEL5, if ifcfg-eth0 is present when /etc/rc.3/S10network runs,
your boot may hang in S10network when it tries to reinitialize eth0 and
interrupts access to the NFS root file system.

The initramfs is not fully de-allocated before it is over-mounted,
which means some memory is lost, but not much.

pxelinux.cfg may be kept under version control.  The "master" file
should contain only the global pxelinux options plus the default "linux"
boot label options.  After installing the master, run nfsroot-kernel-pkg -A
(on the server!) to recreate entries for all the installed kernels.
A caveat is that all entries must have the same kernel command line arguments.

LFS says that /var/tmp state must persist across a reboot, while /tmp
need not persist.  On diskless systems, /tmp can be a ramdisk while /var/tmp
should be an NFS mount unique to the node.  Scripts that need to pass state
across a reboot should be wired for /var/tmp.

The initrd code for detecting the CD-ROM device in a livecd boot is pretty
naive.  USB takes precedence over IDE.  If a device is detected, it is 
assumed to be the boot device, whether or not it has a CD in it.

If a root image is exported read-write but configured to be mounted read-only
by nfsroot, rc.nfsroot halts boot-up because RHEL5 /etc/rc.sysinit will 
attempt to remount root read-write if the bind mount method is used.  
Booting a read-write root image shared between clients may corrupt the image.

kexec-tools-1.101-194.7 will test if /etc/kdump.conf is newer than the
initrd image and attempt to rebuild the initrd if so.  The kexec-tools
initrd rebuild will fail or produce a broken initrd in the nfsroot
environment, so a test for this condition has been added to rc.nfsroot-kdump
to halt boot-up if this condition is found during boot.
