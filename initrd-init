#!/bin/bash

funlib="/nfsrootfun.sh"
configfile="/init.cfg"
prog="initrd-init"

panic ()
{
   local module

   echo "${prog}: boot process failed - starting shell for debug" >&2
   # might need usb keyboard
   for module in ehci-hcd uhci-hcd ohci-hcd; do
      nrf_modprobe /lib/modules ${module} 2>/dev/null
   done
   /bin/bash --login
   sleep 86400
   exit 1
}

# Set up /sysroot from NFS.
sysroot_nfs ()
{
   # modprobe eth0 device
   if [ -n "${ETH0_DEVICE}" ]; then
      if ! nrf_modprobe /lib/modules ${ETH0_DEVICE} ${ETH0_OPTIONS}; then
         panic
      fi
   elif [ -n "${ETH_DEVICES}" ]; then
      for mod in $(nrf_ethmods /lib/modules ${ETH_DEVICES}); do
         nrf_modprobe /lib/modules ${mod}
         # errors here are purposefully non-fatal, unlike above
      done
   else 
      echo "${prog}: error: /etc/sysconfig/nfsroot must define" >&2
      echo "${prog}:  ETH_DEVICES and/or ETH0_DEVICE before initrd creation" >&2
      panic 
   fi
   # sanity check
   if ! ifconfig eth0 >/dev/null 2>&1; then
      echo "${prog}: error: failed to load module for eth0" >&2
      panic
   fi

   # check eth0 mac address against BOOTIF value
   if bootmac=$(nrf_bootmac); then
      if ! nrf_fixeth0 ${bootmac}; then 
         echo "${prog}: error: failed to reassign eth0 to device ${bootmac}" >&2
         panic
      fi
   fi

   echo "${prog}: querying DHCP server" >&2
   ifconfig eth0 up
   nrf_ipconf_dhcp
   if [ -z "${ipconf_ip_address}" ] || [ -z "${ipconf_subnet_mask}" ] || \
         [ -z "${ipconf_broadcast}" ] || [ -z "${ipconf_hostname}" ] || \
    	 [ -z "${ipconf_root_path}" ]; then
      echo "${prog}: error: insufficient information to configure network" >&2
      panic
   fi
   echo "${prog}: configuring network" >&2
   ifconfig eth0 ${ipconf_ip_address} netmask ${ipconf_subnet_mask} \
         broadcast ${ipconf_broadcast}
   hostname ${ipconf_hostname}
   if [ -n "${ipconf_router}" ]; then
      ip route add default via ${ipconf_router} dev eth0
   else
      echo "${prog}: warning: no default route configured" >&2
   fi

   if ! echo ${ipconf_root_path} | grep -q ":"; then
      echo "${prog}: error: invalid root_path" >&2
      panic
   fi
   nrf_modprobe /lib/modules sunrpc
   sysctl -w "sunrpc.max_resvport=987"  # Avoid Lustre port 988 collision
   nrf_modprobe /lib/modules nfs

   if echo ${ipconf_root_path} | grep -q "tar.gz$"; then
      tbdir=$(dirname ${ipconf_root_path})
      tbfile=$(basename ${ipconf_root_path})
      echo "${prog}: mounting ramdisk" >&2
      mount -n -t tmpfs -omode=755 none /sysroot
      echo "${prog}: mounting ${tbdir}" >&2
      nrf_nfsmount ${tbdir} /mnt ${NFSMOUNTOPTS}
      echo "${prog}: extracting ${tbfile}" >&2
      if ! terrors=$(zcat /mnt/${tbfile} | tar -C /sysroot -xpf - 2>&1); then
         echo "$terrors"
         panic
      fi
      echo "${prog}: unmounting ${tbdir}" >&2
      umount ${tbdir}
   else
      echo "${prog}: mounting ${ipconf_root_path}" >&2
      nrf_nfsmount ${ipconf_root_path} /sysroot ${NFSMOUNTOPTS}
   fi
}

# Set up /sysroot from cdrom.
sysroot_cdrom ()
{
   local module

   for module in ehci-hcd uhci-hcd ohci-hcd sg usb-storage sr_mod ide-cd; do
      nrf_modprobe /lib/modules ${module}
   done
   sleep 5

   if ! cdrom=$(nrf_findcdrom); then
      echo "${prog}: could not find cdrom device" >&2
      panic
   fi
   echo "${prog}: mounting ${cdrom}" >&2
   if ! mount -n -o ro ${cdrom} /sysroot; then
      panic 
   fi
}


##
## Main
##

if [ -f $funlib ]; then
   . $funlib
else
   echo "${prog}: $funlib does not exist" >&2
   panic
fi
if [ -f $configfile ]; then
   . $configfile
else
   echo "${prog}: warning: $configfile does not exist" >&2
fi

mount -n -t proc /proc /proc 

# modprobe any extra modules
if [ -n "${MODPROBE}" ]; then
   nrf_modprobe /lib/modules ${MODPROBE}
fi

# Set up /sysroot
if nrf_bootmac >/dev/null; then
   sysroot_nfs
else
   sysroot_cdrom
fi

umount -n /proc

# NOTE: the correct way to "switch_root" from an initramfs is
# to remove everything out of the initramfs to free up space and mount
# new root over the top of the old one.  Pivot_root will not work.

echo "${prog}: moving root" >&2
# FIXME: remaining initramfs content stays allocated forever
rm -f /lib/modules/* #/bin/* /lib/*
cd /sysroot
mount -n --move . /
echo "${prog}: passing control to /etc/rc.nfsroot" >&2
exec chroot . sh -c "exec /etc/rc.nfsroot \"$@\""
